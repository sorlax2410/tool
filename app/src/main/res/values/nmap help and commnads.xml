<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!--SCAN TECHNIQUES-->
    <string name="scanTechniques">SCAN TECHNIQUES</string>
    
    <!--SCAN DESCRIPTION-->
    <string name="udpScanDescription">
        Send UDP packets to targeted port\n
        UDP[6] services are widely deployed. DNS,\n
        SNMP, and DHCP (registered ports 53,\n
        161/162, and 67/68) are three of the\n
        most common.
    </string>

    <string name="tcpSynScanDescription">
        It can be performed quickly, scanning\n
        thousands of ports per second on a fast\n
        network not hampered by restrictive\n
        firewalls. It is also relatively\n
        unobtrusive and stealthy since it never\n
        completes TCP connections.
    </string>

    <string name="ackScanDescription">
        This scan is different than the others\n
        discussed so far in that it never\n
        determines open (or even open|filtered)\n
        ports. It is used to map out firewall\n
        rulesets, determining whether they are\n
        stateful or not and which ports are\n
        filtered.
    </string>

    <string name="maimonScanDescription">
        This technique is exactly the same as\n
        NULL, FIN, and Xmas scans, except that\n
        the probe is FIN/ACK.
    </string>

    <string name="windowScanDecssription">
        Window scan is exactly the same as ACK\n
        scan except that it exploits an\n
        implementation detail of certain\n
        systems to differentiate open ports\n
        from closed ones, rather than always\n
        printing unfiltered when a RST is\n
        returned.
    </string>

    <string name="connectScanDescription">
        TCP connect scan is the default TCP\n
        scan type when SYN scan is not an\n
        option. This is the case when a\n
        user does not have raw packet\n
        privileges.
    </string>

    <string name="tcpNullScanDescription">
        Does not set any bits (TCP flag\n
        header is 0)
    </string>

    <string name="finScanDescription">
        Sets just the TCP FIN bit.
    </string>

    <string name="xmasScanDescription">
        Sets the FIN, PSH, and URG flags,\n
        lighting the packet up like a\n
        Christmas tree.
    </string>

    <string name="sctpInitScanDescription">
        It is mostly being used for\n
        SS7/SIGTRAN related services but\n
        has the potential to be used for\n
        other applications as well.\n
        SCTP INIT scan is the SCTP\n
        equivalent of a TCP SYN scan.
    </string>

    <string name="cookieEchoScanDescription">
        It takes advantage of the fact that\n
        SCTP implementations should silently\n
        drop packets containing COOKIE ECHO\n
        chunks on open ports, but send an\n
        ABORT if the port is closed.
    </string>

    <string name="protocolScanDescription">
        IP protocol scan allows you to determine\n
        which IP protocols (TCP,ICMP,IGMP,etc.)\n
        are supported by target machines.
    </string>

    <string name="FTPRelayHostDescription">
        This allows a user to connect to one FTP\n
        server, then ask that files be sent to a\n
        third-party server.
    </string>

    <string name="IdleScanDescription">
        This advanced scan method allows for a\n
        truly blind TCP port scan of the target\n
        (meaning no packets are sent to the\n
        target from your real IP address).
    </string>

    <string name="customizeTCPDescription">
        The scanflags option allows you to\n
        design your own scan by specifying\n
        arbitrary TCP flags..
    </string>
    
    <!--SCAN OPTIONS-->
    <string name="setScanTcpSyn"> -sS </string>
    <string name="setScanConnect"> -sT </string>
    <string name="setScanAck"> -sA </string>
    <string name="setScanWindow"> -sW </string>
    <string name="setScanMaimon"> -sM </string>
    <string name="setScanUdp"> -sU </string>
    <string name="setScanTcpNull"> -sN </string>
    <string name="setScanFin"> -sF </string>
    <string name="setScanXmas"> -sX </string>
    <string name="setScanSCTPInit"> -sY </string>
    <string name="setScanCookieEcho"> -sZ </string>
    <string name="setScanProtocol"> -sO </string>
    <string name="setFTPRelay"> -b </string>
    <string name="setIdleScan"> -sI </string>
    <string name="setCustomizedTCPFlags"> --scanflags </string>

    
    
    
    <!--PORT SPECIFICATIONS AND SCAN ORDERS-->
    <string name="portSpecificationAndScanOrder">PORT SPECIFICATIONS AND SCAN ORDERS</string>

    <!--PORT SPECIFICATIONS AND SCAN ORDERS DESCRIPTION-->
    <string name="portSpecificationDescription">
        This option specifies which ports you\n
        want to scan and overrides the default.
    </string>

    <string name="portsExcludeDescription">
        This option specifies which ports you do\n
        want to exclude from scanning.
    </string>

    <string name="portFastmodeDescription">
        Specifies that you wish to scan fewer\n
        ports than the default.
    </string>

    <string name="portConsecutiveDescription">
        This randomization is normally desirable,\n
        but you can specify -r for sequential\n
        (sorted from lowest to highest) port\n
        scanning instead.
    </string>

    <string name="topPortsDescription">
        Scans the n highest-ratio ports found in\n
        nmap-services file after excluding all\n
        ports specified by exclude-ports.
    </string>

    <string name="portRatioDescription">
        Scans all ports in nmap-services file\n
        with a ratio greater than the one given.\n
        Ratio must be between 0.0 and 1.1.
    </string>

    <!--PORT SPECIFICATIONS AND SCAN ORDERS OPTIONS-->
    <string name="setPortSpecification"> -p </string>
    <string name="setPortsExclusion"> --exclude-ports </string>
    <string name="setPortFastMode"> -F </string>
    <string name="setPortConsecutiveScan"> -r </string>
    <string name="setTopPorts"> --top-ports </string>
    <string name="setPortRatio"> --port-ratio </string>

    
    
    
    <!--SERVICE/VERSION DETECTION-->
    <string name="serviceVersionDetection">SERVICE/VERSION DETECTION</string>

    <!--SERVICE/VERSION DETECTION DESCRIPTION-->
    <string name="versionDetectionDescription">
        Enables version detection
    </string>

    <string name="versionLightDescription">
        This light mode makes version scanning\n
        much faster, but it is slightly less\n
        likely to identify services.
    </string>

    <string name="versionAllDescription">
        ensuring that every single probe is\n
        attempted against each port.
    </string>

    <string name="versionTraceDescription">
        This causes Nmap to print out extensive\n
        debugging info about what version\n
        scanning is doing.
    </string>

    <string name="versionIntensityDescription">
        The higher the number, the more likely\n
        it is the service will be correctly\n
        identified. However, high intensity\n
        scans take longer. The intensity must be\n
        between 0 and 9..  The default is 7..
    </string>

    <!--SERVICE/VERSION DETECTION OPTIONS-->
    <string name="setVersionDetection"> -sV </string>
    <string name="setVersionLight"> --version-light </string>
    <string name="setVersionAll"> --version-all </string>
    <string name="setVersionTrace"> --version-trace </string>
    <string name="setVersionIntesity"> --version-intensity </string>
    
    
    <!--OS DETECTION-->
    <string name="osDetection">OS DETECTION</string>

    <!--OS DETECTION DESCRIPTION-->
    <string name="osEnableDescription">
        Enable scanning OS
    </string>

    <string name="osLimitDescription">
        Set this option and Nmap will not even\n
        try OS detection against hosts that do\n
        not meet this criteria.
    </string>

    <string name="osGuessDescription">
        When Nmap is unable to detect a perfect\n
        OS match, it sometimes offers up\n
        near-matches as possibilities. The\n
        match has to be very close for Nmap to\n
        do this by default.
    </string>

    <string name="osMaxTriesDescription">
        When Nmap performs OS detection against\n
        a target and fails to find a perfect\n
        match, it usually repeats the attempt.\n
        By default, Nmap tries five times if\n
        conditions are favorable for OS\n
        fingerprint submission, and twice when\n
        conditions aren't so good.
    </string>

    <!--OS DETECTION OPTIONS-->
    <string name="setOSEnable"> -O </string>
    <string name="setOSLimit"> --osscan-limit </string>
    <string name="setOSGuess"> --osscan-guess </string>
    <string name="setOSMaxTries"> --max-os-tries </string> <!--in documentation-->

    
    
    
    <!--TIMING AND PERFORMANCE-->
    <string name="timingAndPerformance">TIMING AND PERFORMANCE</string>

    <!--TIMING AND PERFORMANCE DESCRIPTION-->
    <string name="timeOptionDescription">
        Set a timing template
    </string>

    <string name="minParallelScanDescription">
        Adjust parallel scan group sizes
    </string>

    <string name="maxParallelScanDescription">
        Adjust parallel scan group sizes
    </string>

    <string name="minParallelProbeDescription">
        Adjust probe parallelization
    </string>

    <string name="maxParallelProbeDescription">
        Adjust probe parallelization
    </string>

    <string name="minProbeTimeoutDescription">
        Adjust probe timeouts
    </string>

    <string name="maxProbeTimeoutDescription">
        Adjust probe timeouts
    </string>

    <string name="initProbeTimeoutDescription">
        Adjust probe timeouts
    </string>

    <string name="maxRetriesDescription">
        Specify the maximum number of port scan\n
        probe retransmissions
    </string>

    <string name="hostTimeoutDescription">
        Give up on slow target hosts
    </string>

    <string name="scanDelayDescription">
        Adjust delay between probes
    </string>

    <string name="maxScanDelayDescription">
        Adjust delay between probes
    </string>

    <string name="minPacketRateDescription">
        Directly control the scanning rate
    </string>

    <string name="maxPacketRateDescription">
        Directly control the scanning rate
    </string>

    <string name="nsockEngineDescription">
        Enforce use of a given nsock IO
        multiplexing engine. Only the\n
        select(2)-based fallback engine is\m
        guaranteed to be available on your\n
        system.
    </string>

    <string name="reduceICMPDescription">
        reduce the number of ICMP error\n
        messages (such as port-unreachable\n
        errors) received.
    </string>

    <!--TIMING AND PERFORMANCE OPTIONS-->
    <string name="setTime"> -T </string>
    <string name="setMinParallelScanGroupSize"> --min-hostgroup </string>
    <string name="setMaxParallelScanGroupSize"> --max-hostgroup </string>
    <string name="setMaxParallelProbe"> --max-parallelism </string>
    <string name="setMinParallelProbe"> --min-parallelism </string>
    <string name="setMinProbeTimeout"> --min-rtt-timeout </string>
    <string name="setMaxProbeTimeout"> --max-rtt-timeout </string>
    <string name="setInitProbeTimeout"> --initial-rtt-timeout </string>
    <string name="setMaxRetries"> --max-retries </string>
    <string name="setHostTimeout"> --host-timeout </string>
    <string name="setScanDelay"> --scan-delay </string>
    <string name="setMaxScanDelay"> --max-scan-delay </string>
    <string name="setMinPacketRate"> --min-rate </string>
    <string name="setMaxPacketRate"> --max-rate </string>
    <string name="setNsockEngine"> --nsock-engine </string> <!--in documentation-->
    <string name="setReduceICMPErrorMsg"> --defeat-rst-ratelimit </string> <!--in documentation-->
    
    
    
    <!--FIREWALL EVASION AND SPOOFING-->
    <string name="firewallEvasionAndSpoofing">FIREWALL EVASION AND SPOOFING</string>

    <!--FIREWALL EVASION AND SPOOFING DESCRIPTION-->
    <string name="setFragmentPacketDescription">
        The -f option causes the requested scan\n
        (including ping scans) to use tiny\n
        fragmented IP packets. Don't also\n
        specify -f if you use mtu.
    </string>

    <string name="setMTUDescription">
        IP header fragment packets offset size\n
        specification.
    </string>

    <string name="setDecoyDescription">
        Cloak a scan with decoys
    </string>

    <string name="setSpoofSourceAddressDescription">
        Spoof source address
    </string>

    <string name="setInterfaceDescription">
        Use specified interface
    </string>

    <string name="setSourcePortDescription">
        Spoof source port number
    </string>

    <string name="setProxiesDescription">
        Relay TCP connections through a chain\n
        of proxies.
    </string>

    <string name="setBinaryPayloadToSentPackageDescription">
        Append custom binary data to sent\n
        packets
    </string>

    <string name="setStringToSentPackageDescription">
        Append custom string to sent packets
    </string>

    <string name="setRandomDataToSentPackageDescription">
        Append random data to sent packets
    </string>

    <string name="setSendPackageIPOptionsDescription">
        Send packets with specified ip options\n
        The IP protocol[13] offers several\n
        options which may be placed in packet\n
        headers. Unlike the ubiquitous TCP\n
        options, IP options are rarely seen due\n
        to practicality and security concerns.
    </string>

    <string name="setTimeToLiveDescription">
        Sets the IPv4 time-to-live field in\n
        sent packets to the given value.
    </string>

    <string name="setSpoofMACAddressDescription">
        Spoof MAC address
    </string>

    <string name="setSendPackageBogusDescription">
        Asks Nmap to use an invalid TCP, UDP\n
        or SCTP checksum for packets sent to\n
        target hosts
    </string>

    <string name="setADLER32AlgorithmDescription">
        Use deprecated Adler32 instead of\n
        CRC32C for SCTP checksums
    </string>

    <string name="setRandomizeHostOrderDescription">
        Randomize target host order
    </string>

    <!--FIREWALL EVASION AND SPOOFING OPTIONS-->
    <string name="setFragmentPacket"> -f </string>
    <string name="setMTU"> --mtu </string>
    <string name="setDecoy"> -D </string>
    <string name="setSpoofSourceAddress"> -S </string>
    <string name="setInterface"> -e </string>
    <string name="setSourcePort"> --source-port </string>
    <string name="setProxies"> --proxies </string>
    <string name="setBinaryPayloadToSentPackage"> --data </string>
    <string name="setStringToSentPackage"> --data-string </string>
    <string name="setRandomDataToSentPackage"> --data-length </string>
    <string name="setSendPackageIPOptions"> --ip-options </string>
    <string name="setTimeToLive"> --ttl </string>
    <string name="setSpoofMACAddress"> --spoof-mac </string>
    <string name="setSendPackageBogus"> --badsum </string>
    <string name="setADLER32Algorithm"> --adler32 </string> <!--in documentation-->
    <string name="setRandomizeHostOrder"> --randomize-hosts </string> <!--in documentation-->


</resources>